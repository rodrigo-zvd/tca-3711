#!/bin/bash

# Script to create and configure the cloud-init boot script on the remote XCP-ng host.
# This script is executed on your controller machine (e.g., workstation, automation server).

# --- SSH Access Configuration for XCP-ng Host ---
# IMPORTANT: Update these variables for your environment!
XCPNG_HOST="192.168.1.49" # <--- Change to your XCP-ng host's IP/Hostname
SSH_USER="root"                      # <--- SSH user for the XCP-ng host (usually 'root')
SSH_PASSWORD="mypassword"   # <--- UNCOMMENT and fill if using password (NOT RECOMMENDED for automation)
# SSH_KEY="/home/rodrigo/.ssh/id_rsa"  # <--- Change to the path of your private SSH key (RECOMMENDED)

# --- File Paths on the Nested XCP-ng VM ---
REMOTE_SCRIPT_PATH="/usr/local/bin/cloud_init_boot_config.sh"
REMOTE_SERVICE_PATH="/etc/systemd/system/cloud-init-boot.service"
REMOTE_MARKER_FILE="/var/run/cloud_init_boot_complete"

# --- Functions ---

# Function to execute commands via SSH, optionally piping content to stdin
execute_remote() {
    local cmd="$1"
    local stdin_content="${2:-}" # Optional second argument for stdin content

    echo "Executing remotely on $XCPNG_HOST: $cmd"

    local ssh_command_options="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" # Ignores known_hosts completely for automation

    local ssh_command
    if [[ -n "$SSH_PASSWORD" ]]; then
        # Using sshpass for password authentication (requires 'sshpass' package)
        # Ensure sshpass is installed on the controller machine.
        if ! command -v sshpass &> /dev/null; then
            echo "ERROR: 'sshpass' not found. Please install it or use SSH keys." >&2
            exit 1
        fi
        ssh_command="sshpass -p \"$SSH_PASSWORD\" ssh $ssh_command_options \"$SSH_USER@$XCPNG_HOST\""
    elif [[ -n "$SSH_KEY" ]]; then
        # SSH key authentication (recommended)
        ssh_command="ssh -i \"$SSH_KEY\" $ssh_command_options \"$SSH_USER@$XCPNG_HOST\""
    else
        echo "ERROR: No SSH authentication method (password or key) provided." >&2
        exit 1
    fi

    if [[ -n "$stdin_content" ]]; then
        # Use a here-string to pipe content to the remote command
        eval "$ssh_command \"$cmd\"" <<< "$stdin_content"
    else
        # Execute command directly
        eval "$ssh_command \"$cmd\""
    fi

    if [ $? -ne 0 ]; then
        echo "ERROR: Failed to execute remote command on $XCPNG_HOST. Script will exit." >&2
        exit 1
    fi
}

# --- Generation of File Contents ---

# Content of the Cloud-Init boot script to be deployed on the nested XCP-ng VM
# Note: Variables like $VM_NEW_IP are expanded by the *local* shell before transfer.
# Variables like \$LOG_FILE or \$(date) are escaped to be expanded by the *remote* shell.
read -r -d '' CLOUD_INIT_VM_SCRIPT_CONTENT << EOF
#!/bin/bash

# ===================================================================================
# Cloud-Init Boot Configuration Script for Nested XCP-ng VM
#
# Execution Context:
# This script is designed to run *only once* during the
# first boot of a **nested XCP-ng VM**. It acts as the "user-data"
# delivered via **Cloud-Init** by **Xen Orchestra** (if a user-data disk is present)
# or provides default network configuration if no user-data disk is found.
# ===================================================================================

# --- Configuration ---
LOG_FILE="/var/log/cloud-init-boot.log" # Log file for this script
MOUNT_POINT="/tmp/sdb_cloudinit_mount"  # Temporary mount point for the disk
SOURCE_DISK="/dev/sdb"                  # The disk containing the user-data script
USER_DATA_SCRIPT="\${MOUNT_POINT}/user-data" # Path to the user-data script on the mounted disk
MARKER_FILE="$REMOTE_MARKER_FILE"       # Marker file to ensure single execution

# --- Functions ---
log_message() {
    echo "\$(date '+%Y-%m-%d %H:%M:%S') - \$1" | tee -a "\$LOG_FILE"
}

error_exit() {
    log_message "ERROR: \$1"
    exit 1
}

# --- Script Start Logic ---
touch "\$LOG_FILE" || error_exit "Failed to create log file: \$LOG_FILE"
log_message "Starting Cloud-Init Boot script for nested XCP-ng VM."

if [ -f "\$MARKER_FILE" ]; then
    log_message "Marker file '\$MARKER_FILE' found. This is not the first boot (Cloud-Init already executed). Exiting."
    exit 0
fi

log_message "No marker file found. Proceeding with Cloud-Init Boot tasks."

# --- Wait for XAPI to be active ---
log_message "Waiting for XAPI service to be active..."
MAX_ATTEMPTS_XAPI=60 # Max 60 attempts (10 minutes)
ATTEMPT_XAPI=0
while ! systemctl is-active --quiet xapi; do
    if [ \$ATTEMPT_XAPI -ge \$MAX_ATTEMPTS_XAPI ]; then
        error_exit "XAPI service did not become active after \$MAX_ATTEMPTS_XAPI attempts. Cannot proceed."
    fi
    log_message "XAPI is not yet active. Waiting 10 seconds... (Attempt \$((ATTEMPT_XAPI + 1))/\$MAX_ATTEMPTS_XAPI)"
    sleep 10
    ATTEMPT_XAPI=\$((ATTEMPT_XAPI + 1))
done
log_message "XAPI service is now active."

# --- Check for the existence of /dev/sdb (Cloud-Init User-Data Disk) ---
if [ ! -b "\$SOURCE_DISK" ]; then
    log_message "Source disk '\$SOURCE_DISK' does not exist or is not a block device."
    log_message "Assuming no Cloud-Init user-data disk is present. Proceeding with default network configuration (DHCP)."

    # --- Start XCP-ng Management PIF DHCP Configuration ---
    # This block is executed ONLY if SOURCE_DISK does not exist.
    log_message "--- Starting XCP-ng Management PIF DHCP Configuration (No Cloud-Init Disk) ---"

    # 1. Get the UUID of the current management PIF with a retry loop
    log_message "Identifying the current management PIF with retries..."
    MANAGEMENT_PIF_UUID=""
    MAX_PIF_ATTEMPTS=12 # Try up to 12 times, 10s sleep each = 2 minutes total
    CURRENT_PIF_ATTEMPT=0
    PIF_SLEEP_SECONDS=10 # Wait 10 seconds between attempts

    while [ -z "\$MANAGEMENT_PIF_UUID" ] && [ "\$CURRENT_PIF_ATTEMPT" -lt "\$MAX_PIF_ATTEMPTS" ]; do
        CURRENT_PIF_ATTEMPT=\$((CURRENT_PIF_ATTEMPT + 1))
        log_message "Attempt \$CURRENT_PIF_ATTEMPT of \$MAX_PIF_ATTEMPTS: Running 'xe pif-list management=true --minimal'..."
        # Execute xe pif-list and capture output, redirecting stderr to /dev/null to suppress temporary errors
        MANAGEMENT_PIF_UUID=\$(xe pif-list management=true --minimal 2>/dev/null || true) 
        
        if [ -z "\$MANAGEMENT_PIF_UUID" ]; then
            log_message "Management PIF not found yet. Waiting \$PIF_SLEEP_SECONDS seconds..."
            sleep "\$PIF_SLEEP_SECONDS"
        fi
    done

    if [ -z "\$MANAGEMENT_PIF_UUID" ]; then
        error_exit "Could not find a management PIF on this host after \$MAX_PIF_ATTEMPTS attempts and \$((MAX_PIF_ATTEMPTS * PIF_SLEEP_SECONDS)) seconds. Cannot configure DHCP."
    fi

    log_message "Management PIF UUID found: \$MANAGEMENT_PIF_UUID"

    # 2. Get details about the management PIF before changing (optional, for logging)
    log_message "Current management PIF details:"
    xe pif-param-list uuid="\$MANAGEMENT_PIF_UUID" | grep -E 'device|IP|netmask|mode' || log_message "Could not retrieve full PIF details."

    # 3. Reconfigure the management PIF to DHCP mode
    log_message "Configuring management PIF '\$MANAGEMENT_PIF_UUID' to DHCP mode..."
    xe pif-reconfigure-ip uuid="\$MANAGEMENT_PIF_UUID" mode=DHCP || error_exit "Failed to configure PIF to DHCP."

    log_message "--- XCP-ng Management PIF DHCP Configuration Completed. ---"
    log_message "The management interface of this XCP-ng host has been set to DHCP mode."
    log_message "The host will now attempt to obtain an IP address via DHCP."
    log_message "There might be a brief interruption in connectivity while the new IP is acquired."

    # Create marker file and exit if no user-data disk was present.
    # The script completes here as there's no user-data to process.
    log_message "Creating marker file '\$MARKER_FILE' to prevent future executions (DHCP configured, no user-data processed)."
    touch "\$MARKER_FILE" || log_message "WARNING: Failed to create marker file. Script might run again on next boot."
    log_message "Cloud-Init Boot script finished (DHCP configured, no user-data)."
    exit 0 # Exit here, as no user-data disk implies our task is done.

else
    # --- Source Disk exists: Proceed with Cloud-Init user-data processing ---
    log_message "Source disk '\$SOURCE_DISK' found. Proceeding with user-data processing."

    log_message "Creating mount point: \$MOUNT_POINT"
    mkdir -p "\$MOUNT_POINT" || error_exit "Failed to create mount point: \$MOUNT_POINT"

    log_message "Mounting \$SOURCE_DISK on \$MOUNT_POINT..."
    if ! mount "\$SOURCE_DISK" "\$MOUNT_POINT"; then
        log_message "Failed to mount \$SOURCE_DISK. It might not exist or is already mounted. Retrying in 5 seconds..."
        sleep 5
        if ! mount "\$SOURCE_DISK" "\$MOUNT_POINT"; then
            error_exit "Failed to mount \$SOURCE_DISK after second attempt. Exiting."
        fi
    fi
    log_message "\$SOURCE_DISK mounted successfully."

    if [ -f "\$USER_DATA_SCRIPT" ] && [ -x "\$USER_DATA_SCRIPT" ]; then
        log_message "Executing user-data script: \$USER_DATA_SCRIPT"
        # Execute user-data and capture its output to the log file
        /bin/bash "\$USER_DATA_SCRIPT" >> "\$LOG_FILE" 2>&1
        USER_DATA_EXIT_CODE=\$?
        if [ \$USER_DATA_EXIT_CODE -eq 0 ]; then
            log_message "User-data script executed successfully."
        else
            log_message "User-data script exited with code \$USER_DATA_EXIT_CODE. Check \$LOG_FILE for details."
        fi
    else
        log_message "User-data script not found or not executable at \$USER_DATA_SCRIPT. Skipping execution."
    fi

    log_message "Unmounting \$MOUNT_POINT..."
    if ! umount "\$MOUNT_POINT"; then
        log_message "Failed to unmount \$MOUNT_POINT. Manual unmount might be required. Proceeding anyway."
    fi
    log_message "\$MOUNT_POINT unmounted successfully."

    log_message "Removing mount point directory: \$MOUNT_POINT"
    rmdir "\$MOUNT_POINT" || log_message "Failed to remove mount point directory. It might not be empty."

fi # End of if/else for SOURCE_DISK existence

log_message "Creating marker file '\$MARKER_FILE' to prevent future executions."
touch "\$MARKER_FILE" || log_message "WARNING: Failed to create marker file. Script might run again on next boot."

log_message "Cloud-Init Boot script finished."

exit 0
EOF

# Content of the systemd service file to be deployed on the nested XCP-ng VM
read -r -d '' SYSTEMD_SERVICE_CONTENT << EOF
[Unit]
Description=XCP-ng Cloud-Init Boot Configuration
# Ensure network is up before running
After=network-online.target remote-fs.target
Wants=network-online.target

[Service]
Type=oneshot
ExecStart=$REMOTE_SCRIPT_PATH
RemainAfterExit=true
StandardOutput=journal+console
StandardError=journal+console

[Install]
WantedBy=multi-user.target
EOF

# --- Remote Execution on XCP-ng Host ---

echo "--- Starting remote configuration on XCP-ng host ($XCPNG_HOST) ---"

# 1. Create /usr/local/bin directory if it doesn't exist
execute_remote "mkdir -p /usr/local/bin"

# 2. Create the Cloud-Init Boot script on the remote host
echo "Creating the Cloud-Init Boot script at $REMOTE_SCRIPT_PATH..."
execute_remote "sudo tee $REMOTE_SCRIPT_PATH > /dev/null" "$CLOUD_INIT_VM_SCRIPT_CONTENT"

# 3. Give execute permission to the script
echo "Setting execute permissions for the script: $REMOTE_SCRIPT_PATH"
execute_remote "chmod +x $REMOTE_SCRIPT_PATH"

# 4. Create the systemd service file on the remote host
echo "Creating the systemd service file at $REMOTE_SERVICE_PATH..."
execute_remote "sudo tee $REMOTE_SERVICE_PATH > /dev/null" "$SYSTEMD_SERVICE_CONTENT"

# 5. Reload systemd manager configuration
echo "Reloading systemd manager configuration..."
execute_remote "systemctl daemon-reload"

# 6. Enable the service to start on boot
echo "Enabling the service 'cloud-init-boot.service' to start on boot..."
execute_remote "systemctl enable cloud-init-boot.service"

echo "--- Remote configuration completed. ---"
echo "The script '$REMOTE_SCRIPT_PATH' and the systemd service have been configured on host '$XCPNG_HOST'."
echo "For changes to take effect, you must **reboot the XCP-ng host**."

exit 0